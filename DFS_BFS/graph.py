'''
[graph 표현 방식]
    1. 인접 행렬
        : 2차원 행렬, 연결관계 표현
    2. 인접 리스트
        : 연결 리스트, 인접노드 (노드, 거리) append.
        : C++ JAVA 등에서는 '연결리스트' 라이브러리 이용
        : python에서는 '2차원 행렬' 이용
'''

''' 1. 인접 행렬 '''
INF = 999999999 # 9 아홉개 or 987654321

graph = [ #대각선은 '0', 연결안된건 'INF', 연결된건 '거리'
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

''' 2. 인접 리스트 '''
graph = [[] for _ in range(3)] #행이 3개인 2차원 행렬

# 노드 0에 연결된 노드들 append
graph[0].append((1,7)) # (노드, 거리) 를 tuple 형태로 append
graph[0].append((2,5))

graph[1].append((0,7))

graph[2].append((0,5))

'''
[장단점]
    1. 인접 행렬
        (-) 메모리 비효율적
        (+) g[m][n]으로 연결관계 바로 알 수 있음
    2. 인접 리스트
        (+) 메모리 효율적
        (-) g[m]을 순차탐색해야 m과 n이 연결되어있는지 알 수 있음
        
    => 특정한 노드와 연결된 모든 인접모드를 순회하는 경우엔 "2. 인접 리스트" 방식이 효율적
'''